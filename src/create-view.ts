import * as vscode from 'vscode';
import * as fs from 'fs';
import * as path from 'path';

const WORKSPACE_FOLDERS = {
	views: 'views',
	viewModelsInterfaces: 'view-models.itf',
	viewModelsMock: 'view-models.mock',
};

let viewId = 0;

/**
 * function called by the command 'newView'
 */
export function createView(): void {
	const rootPath = vscode.workspace.rootPath;
	if (!rootPath) {
		console.error('no workspace opened');
		return;
	}
	initWorkspace(rootPath);
	const viewsDir = path.join(rootPath, WORKSPACE_FOLDERS.views);
	const fileName = ++viewId + '.json';
	const viewFilePath = path.join(viewsDir, fileName);
	fs.writeFileSync(viewFilePath, defaultView);

	// show the file in editor
	const uri: vscode.Uri = vscode.Uri.file(viewFilePath);
	vscode.workspace.openTextDocument(uri).then((textDocument: vscode.TextDocument) => {
		vscode.window.showTextDocument(textDocument, vscode.ViewColumn.One, false).then(textEditor => {
			//textEditor.edit(edit => {
			//edit.insert(new vscode.Position(0, 0), "Your advertisement here");
			//});
		});
	}, (error: any) => {
		console.error(error);
	});

	vscode.window.showInformationMessage('azog view created');
	/*vscode.window.showInputBox({
		placeHolder: 'i like tennis',
		prompt: 'write what you want'
	});*/
}

/*
We don't ask a name for the view because it's not necessary to choose a name before
coding it. The developer will be able to choose a name using the webview if he wants to.
The view will have an autogenerated id.
*/

/**
 * create the folder structure
 * - views : contains the views
 * - view-models.itf : contains the interfaces of the view-models
 * - view-models.mock : contains the mock values for each view-models
 */
function initWorkspace(rootPath: string): void {
	const folderNames = [
		WORKSPACE_FOLDERS.views,
		WORKSPACE_FOLDERS.viewModelsInterfaces,
		WORKSPACE_FOLDERS.viewModelsMock
	];
	for (const folderName of folderNames) {
		const dir = path.join(rootPath, folderName);
		createFolderIfNotExist(dir);
	}
}

function createFolderIfNotExist(dir: string): void {
	if (!fs.existsSync(dir)) {
		fs.mkdirSync(dir);
	}
}

const defaultView = `{
	"views": {
		"1": {
			"type": "iconWF",
			"value": {
				"iconName": "calendar",
				"style": {
					"color": 2,
					"size": 2
				}
			}
		}
	}
}`;
