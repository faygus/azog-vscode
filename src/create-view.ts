import * as vscode from 'vscode';
import * as fs from 'fs';
import * as path from 'path';
import { WORKSPACE_FOLDERS, workspaceManager } from './workspace-manager';

let viewId = 0;

/**
 * function called by the command 'newView'
 */
export function createView(): void {
	const rootPath = vscode.workspace.rootPath;
	if (!rootPath) {
		console.error('no workspace opened');
		return;
	}
	workspaceManager.initWorkspace(rootPath);
	const id = ++viewId;
	const viewFileName = id + '.xml';
	const viewFilePath = path.join(rootPath, WORKSPACE_FOLDERS.views, viewFileName);
	fs.writeFileSync(viewFilePath, defaultView);
	// view-model interface
	const viewModelInterfaceFileName = id + '';
	const viewModelInterfaceFilePath = path.join(rootPath,
		WORKSPACE_FOLDERS.viewModelsInterfaces, viewModelInterfaceFileName);
	fs.writeFileSync(viewModelInterfaceFilePath, defaultViewModelInterface);
	// view-model mock
	const mockFileName = id + '';
	const mockFilePath = path.join(rootPath,
		WORKSPACE_FOLDERS.viewModelsMock, mockFileName);
	fs.writeFileSync(mockFilePath, defaultMockViewModel);

	// show the file in editor
	const uri: vscode.Uri = vscode.Uri.file(viewFilePath);
	vscode.workspace.openTextDocument(uri).then((textDocument: vscode.TextDocument) => {
		vscode.window.showTextDocument(textDocument, vscode.ViewColumn.One, false).then(textEditor => {
			//textEditor.edit(edit => {
			//edit.insert(new vscode.Position(0, 0), "Your advertisement here");
			//});
		});
	}, (error: any) => {
		console.error(error);
	});

	vscode.window.showInformationMessage('azog view created');
	/*vscode.window.showInputBox({
		placeHolder: 'i like tennis',
		prompt: 'write what you want'
	});*/
}

/*
We don't ask a name for the view because it's not necessary to choose a name before
coding it. The developer will be able to choose a name using the webview if he wants to.
The view will have an autogenerated id.
*/

const defaultView = `<LabelWF text="hello world" style="{
	color: 'White',
	size: 'Medium'	
}"/>`;

const defaultViewModelInterface = `{
	"properties": {
		"text": "string"
	}
}`;

const defaultMockViewModel = `{
	"text": {
		"loop": true,
		"values": [
			{
				"value": "Hello world",
				"timeout": 0
			},
			{
				"value": "By world",
				"timeout": 1000
			}
		]
	}
}`;
